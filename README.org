#+TITLE:cl-org-more: cl-org-mode improved twice

* What is it?

  CL-ORG-MORE is a three-component, layered solution for
  manipulation of Org-structured text:

  - CL-ORG-MORE-RAW ::
    provides tolerant parsing of Org-structured text into a semi-detailed AST
  - CL-ORG-MORE ::
    "dresses" the AST into a fairly rich object tree, and allows serialisation into text
  - CL-ORG-MORE-EXTENDED ::
    allows representation of DAGs in Org files, atop a CAS (content-addressed storage)

It closely follows the official [[https://orgmode.org/worg/dev/org-syntax.html#Greater_Elements][Org Syntax]] and
   [[https://orgmode.org/worg/dev/org-element-api.html][Org Element API]].

* Getting started
Clone the repository:
#+begin_src sh
  git clone https://github.com/aartaka/cl-org-more
#+end_src
Then, in your CL image, load =cl-org-more=
#+begin_src lisp
  ;; Put cl-org-more into somewhere ASDF can find it, or run
  ;; (asdf:load-asd #p"/path/to/cl-org-more/")
  (asdf:load-system :cl-org-more-extended)
#+end_src
And then you can test it
#+begin_src lisp
  (org:org-parse #p"/path/to/your/agenda.org")
#+end_src
And enjoy looking at your file parsed to a cool hierarchical object tree :)


* Dependencies

  - CL-ORG-MORE-RAW:      alexandria parser-combinators iterate split-sequence
  - CL-ORG-MORE:          cl-org-more-raw cl-containers
  - CL-ORG-MORE-EXTENDED: cl-org-more ironclad flexi-streams

* Usage

 Use =(cl-org-mode-raw:org-raw-parse file-or-string)= to get a
 representation of an Org document as a tree of cons cells:

 #+BEGIN_SRC text
   CL-USER> (cl-org-mode-raw:org-raw-parse #p"README.org")
   (:ORG (:HEADER :TITLE "cl-org-more: cl-org-mode improved twice")
    (:SECTION "
   ")
    (:ENTRY (:STARS 1 :TITLE "What is it?")
     (:SECTION "
     CL-ORG-MORE is a three-component, layered solution for
     manipulation of Org-structured text:

     - CL-ORG-MORE-RAW ::
       provides tolerant parsing of Org-structured text into a semi-detailed AST
     - CL-ORG-MORE ::
       \"dresses\" the AST into a fairly rich object tree, and allows serialisation into text
     - CL-ORG-MORE-EXTENDED ::
       allows representation of DAGs in Org files, atop a CAS (content-addressed storage)

   It closely follows the official [[https://orgmode.org/worg/dev/org-syntax.html#Greater_Elements][Org Syntax]] and
      [[https://orgmode.org/worg/dev/org-element-api.html][Org Element API]].

   "))
   ...
   )
 #+end_src

 Use =(cl-org-mode-extended:org-parse-extended #P"README.org")= to get
 a richer representation.

 Use =(org-present kind object)=, where =kind= is one of =:flat= or
 =:normal=, to print objects back as plain text.

 Finally, use the defined readers to access an object's data:

 Node objects define:

 #+BEGIN_SRC text
 title
 section
 children
 status
 priority
 tags
 static-properties
 #+end_src

 A keyword has:

 #+BEGIN_SRC text
 name value optional
 #+end_src

 A container has =children-of=.

 A block has =parameter-of=.

 See them all in =cl-org-mode.lisp=.


* Testing

  Tests depend on the rt library.

  #+BEGIN_SRC common-lisp
  (asdf:test-system :cl-org-more)
  (asdf:test-system :cl-org-more-extended)
  #+END_SRC
